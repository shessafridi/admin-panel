{"version":3,"sources":["config.js","data-provider/segmentService.ts","data-provider/dataProvider.ts","headers/HeadersList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiUrl","process","REACT_APP_API_URL","segmentsObj","getSlice","resource","data","getSliceResource","delete","id","slice","index","findIndex","val","splice","updateDb","getSegmentBody","JSON","stringify","SegmentDetailID","SegmentID","Title","fetchUtils","fetchJson","method","body","getSegments","a","Object","keys","length","console","log","json","forEach","title","toLowerCase","replace","parse","Details","getById","res","segmentService","find","httpClient","getList","params","total","getOne","parseInt","toString","getMany","getManyReference","update","then","updateMany","Promise","all","ids","map","responses","create","deleteMany","HeadersList","props","List","Datagrid","TextField","source","EditButton","basePath","DeleteButton","App","Admin","dataProvider","Resource","icon","StarIcon","options","label","name","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAAaA,EACXC,4KAAYC,mBAAqB,iCCqDpB,M,iDAjDbC,YAAmB,G,KAEnBC,SAAW,SAACC,GAAD,OAA6B,EAAKF,YAAYE,GAAUC,M,KACnEC,iBAAmB,SAACF,GAAD,OACjB,EAAKF,YAAYE,I,KAEnBG,OAAS,SAACC,EAAYJ,GACpB,IAAMK,EAAQ,EAAKH,iBAAiBF,GAC9BM,EAAQD,EAAMJ,KAAKM,WAAU,SAAAC,GAAG,OAAIA,EAAIJ,KAAOA,KAGrD,OAFAC,EAAMJ,KAAKQ,OAAOH,EAAO,GAElB,EAAKI,SAASL,I,KAGvBM,eAAiB,SAACN,GAAD,OACfO,KAAKC,UAAU,CACbC,gBAAiBT,EAAMD,GACvBW,UAAWV,EAAMD,GACjBY,MAAOJ,KAAKC,UAAUR,EAAMJ,S,KAGhCS,SAAW,SAACL,GACV,OAAOY,IAAWC,UAAX,UAAwBvB,EAAxB,YAAkCU,EAAMD,IAAM,CACnDe,OAAQ,MACRC,KAAM,EAAKT,eAAeN,M,KAI9BgB,Y,sBAAc,sBAAAC,EAAA,yDACiC,IAAzCC,OAAOC,KAAK,EAAK1B,aAAa2B,OADtB,iCAGRC,QAAQC,IAAIhC,EAAQ,SAHZ,SAI6BsB,IAAWC,UAAUvB,GAJlD,8BAI2DiC,KAJ3D,cAKCC,SAAQ,SAAArB,GACf,IAAMsB,EAAgBtB,EAAIQ,MAAMe,cAAcC,QAAQ,IAAK,IAC3D,EAAKlC,YAAYgC,GAAS,CACxB1B,GAAII,EAAIM,gBACRgB,MAAOtB,EAAIQ,MACXf,KAAMW,KAAKqB,MAAMzB,EAAI0B,aAGzBR,QAAQC,IAAI,EAAK7B,aAbT,kDAeR4B,QAAQC,IAAR,MAfQ,2DC5BVQ,EAAU,SAAC/B,EAAYgC,GAE3B,OADcC,EAAetC,SAASqC,GACzBE,MAAK,SAAA9B,GAAG,OAAIA,EAAIJ,KAAOA,MAGvB,WACbT,GADa,IAEb4C,EAFa,uDAEAtB,IAAWC,UAFX,MAGK,CAClBsB,QAAQ,WAAD,4BAAE,WAAOxC,EAAUyC,GAAjB,SAAAnB,EAAA,sEACDe,EAAehB,cADd,gCAEA,CAAEqB,MAAO,GAAIzC,KAAMoC,EAAetC,SAASC,KAF3C,2CAAF,qDAAC,GAKR2C,OAAQ,SAAC3C,EAAUyC,GAAX,OACNN,EAAQS,SAASH,EAAOrC,GAAGyC,YAAa7C,IAE1C8C,QAAQ,WAAD,4BAAE,WAAO9C,EAAUyC,GAAjB,SAAAnB,EAAA,sEACDe,EAAehB,cADd,gCAEA,CAAEpB,KAAMoC,EAAetC,SAASC,KAFhC,2CAAF,qDAAC,GAKR+C,iBAAiB,WAAD,4BAAE,WAAO/C,EAAUyC,GAAjB,SAAAnB,EAAA,sEACVe,EAAehB,cADL,gCAET,CAAEqB,MAAO,GAAIzC,KAAMoC,EAAetC,SAASC,KAFlC,2CAAF,qDAAC,GAKjBgD,OAAQ,SAAChD,EAAUyC,GAAX,OACNF,EAAW,GAAD,OAAI5C,EAAJ,YAAcK,EAAd,YAA0ByC,EAAOrC,IAAM,CAC/Ce,OAAQ,MACRC,KAAMR,KAAKC,UAAU4B,EAAOxC,QAC3BgD,MAAK,kBAAe,CAAEhD,KAAjB,EAAG2B,UAGbsB,WAAY,SAAClD,EAAUyC,GAAX,OACVU,QAAQC,IACNX,EAAOY,IAAIC,KAAI,SAAAlD,GAAE,OACfmC,EAAW,GAAD,OAAI5C,EAAJ,YAAcK,EAAd,YAA0BI,GAAM,CACxCe,OAAQ,MACRC,KAAMR,KAAKC,UAAU4B,EAAOxC,YAGhCgD,MAAK,SAAAM,GAAS,MAAK,CAAEtD,KAAMsD,EAAUD,KAAI,qBAAG1B,KAAgBxB,WAEhEoD,OAAQ,SAACxD,EAAUyC,GAAX,OACNF,EAAW,GAAD,OAAI5C,EAAJ,YAAcK,GAAY,CAClCmB,OAAQ,OACRC,KAAMR,KAAKC,UAAU4B,EAAOxC,QAC3BgD,MAAK,gBAAGrB,EAAH,EAAGA,KAAH,MAAe,CACrB3B,KAAK,2BAAMwC,EAAOxC,MAAd,IAAoBG,GAAIwB,EAAKxB,UAGrCD,OAAQ,SAACH,EAAUyC,GAEjB,OADAf,QAAQC,IAAIc,GACLJ,EACJlC,OAAOyC,SAASH,EAAOrC,IAAeJ,GACtCiD,MAAK,kBAAe,CACnBhD,KADI,EAAG2B,UAMb6B,WAAY,SAACzD,EAAUyC,GAAX,OACVU,QAAQC,IACNX,EAAOY,IAAIC,KAAI,SAAAlD,GAAE,OACfmC,EAAW,GAAD,OAAI5C,EAAJ,YAAcK,EAAd,YAA0BI,GAAM,CACxCe,OAAQ,eAGZ8B,MAAK,SAAAM,GAAS,MAAK,CAAEtD,KAAMsD,EAAUD,KAAI,qBAAG1B,KAAgBxB,a,6CClDnDsD,EAdiC,SAAAC,GAC9C,OACE,cAACC,EAAA,EAAD,2BAAUD,GAAV,aACE,eAACE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,cAACC,EAAA,EAAD,CAAYC,SAAS,OACrB,cAACC,EAAA,EAAD,CAAcD,SAAS,c,kBCGhBE,MAbf,WACE,OACE,cAACC,EAAA,EAAD,CAAOtC,MAAM,cAAcuC,aAAcA,EAAa1E,GAAtD,SACE,cAAC2E,EAAA,EAAD,CACEC,KAAMC,IACNC,QAAS,CAAEC,MAAO,WAClBC,KAAM,SACNC,KAAMlB,OCDCmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d985ce8.chunk.js","sourcesContent":["export const apiUrl =\n  process.env.REACT_APP_API_URL || 'http://localhost:3100/segments';\n","import { fetchUtils } from 'ra-core';\nimport { apiUrl } from '../config';\nimport { ResourceSlice } from '../models/Slice';\n\nclass SegmentService {\n  segmentsObj: any = {};\n\n  getSlice = (resource: string): any[] => this.segmentsObj[resource].data;\n  getSliceResource = (resource: string): ResourceSlice =>\n    this.segmentsObj[resource];\n\n  delete = (id: number, resource: string) => {\n    const slice = this.getSliceResource(resource);\n    const index = slice.data.findIndex(val => val.id === id);\n    slice.data.splice(index, 1);\n\n    return this.updateDb(slice);\n  };\n\n  getSegmentBody = (slice: ResourceSlice) =>\n    JSON.stringify({\n      SegmentDetailID: slice.id,\n      SegmentID: slice.id,\n      Title: JSON.stringify(slice.data),\n    });\n\n  updateDb = (slice: ResourceSlice) => {\n    return fetchUtils.fetchJson(`${apiUrl}/${slice.id}`, {\n      method: 'PUT',\n      body: this.getSegmentBody(slice),\n    });\n  };\n\n  getSegments = async () => {\n    if (Object.keys(this.segmentsObj).length === 0) {\n      try {\n        console.log(apiUrl, 'DEBUG');\n        const response: any[] = await (await fetchUtils.fetchJson(apiUrl)).json;\n        response.forEach(val => {\n          const title: string = val.Title.toLowerCase().replace(' ', '');\n          this.segmentsObj[title] = {\n            id: val.SegmentDetailID,\n            title: val.Title,\n            data: JSON.parse(val.Details),\n          };\n        });\n        console.log(this.segmentsObj);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n}\n\nexport default new SegmentService();\n","/* eslint-disable import/no-anonymous-default-export */\n\nimport { fetchUtils, DataProvider } from 'ra-core';\nimport segmentService from './segmentService';\n\nconst getById = (id: number, res: string) => {\n  const slice = segmentService.getSlice(res);\n  return slice.find(val => val.id === id);\n};\n\nexport default (\n  apiUrl: string,\n  httpClient = fetchUtils.fetchJson\n): DataProvider => ({\n  getList: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: segmentService.getSlice(resource) };\n  },\n\n  getOne: (resource, params) =>\n    getById(parseInt(params.id.toString()), resource),\n\n  getMany: async (resource, params) => {\n    await segmentService.getSegments();\n    return { data: segmentService.getSlice(resource) };\n  },\n\n  getManyReference: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: segmentService.getSlice(resource) };\n  },\n\n  update: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}/${params.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json })),\n\n  // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n  updateMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify(params.data),\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n  create: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({\n      data: { ...params.data, id: json.id },\n    })),\n\n  delete: (resource, params) => {\n    console.log(params);\n    return segmentService\n      .delete(parseInt(params.id as string), resource)\n      .then(({ json }) => ({\n        data: json,\n      }));\n  },\n\n  // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n  deleteMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'DELETE',\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n});\n","import * as React from 'react';\nimport {\n  Datagrid,\n  DeleteButton,\n  EditButton,\n  List,\n  TextField,\n} from 'react-admin';\n\nexport interface HeadersListProps {}\nconst HeadersList: React.FC<HeadersListProps> = props => {\n  return (\n    <List {...props}>\n      <Datagrid>\n        <TextField source='id' />\n        <TextField source='title' />\n        <TextField source='text' />\n        <EditButton basePath='id' />\n        <DeleteButton basePath='id' />\n      </Datagrid>\n    </List>\n  );\n};\n\nexport default HeadersList;\n","import React from 'react';\nimport './App.css';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './data-provider/dataProvider';\nimport HeadersList from './headers/HeadersList';\nimport { apiUrl } from './config';\nimport StarIcon from '@material-ui/icons/Star';\n\nfunction App() {\n  return (\n    <Admin title='Admin Panel' dataProvider={dataProvider(apiUrl)}>\n      <Resource\n        icon={StarIcon}\n        options={{ label: 'Headers' }}\n        name={'header'}\n        list={HeadersList}\n      ></Resource>\n    </Admin>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}