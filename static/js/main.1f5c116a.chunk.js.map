{"version":3,"sources":["config.js","data-provider/segmentService.ts","data-provider/dataProvider.ts","headers/HeadersList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiUrl","process","REACT_APP_API_URL","segmentsObj","getSlice","searchQuery","getSegments","a","Object","keys","length","console","log","fetchUtils","fetchJson","json","forEach","val","title","Title","toLowerCase","replace","Details","getById","id","res","JSON","parse","segmentService","find","httpClient","getList","resource","params","total","data","getOne","parseInt","toString","getMany","getManyReference","update","method","body","stringify","then","updateMany","Promise","all","ids","map","responses","create","delete","deleteMany","HeadersList","props","List","Datagrid","TextField","source","App","Admin","dataProvider","Resource","options","label","name","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f5c116a.chunk.js","sourcesContent":["export const apiUrl =\n  process.env.REACT_APP_API_URL || 'http://localhost:3100/segments';\n","import { fetchUtils } from 'ra-core';\nimport { apiUrl } from '../config';\n\nclass SegmentService {\n  segmentsObj: any = {};\n\n  getSlice = (searchQuery: string) => this.segmentsObj[searchQuery];\n\n  getSegments = async () => {\n    if (Object.keys(this.segmentsObj).length === 0) {\n      try {\n        console.log(apiUrl, 'DEBUG');\n        const response: any[] = await (await fetchUtils.fetchJson(apiUrl)).json;\n        response.forEach(val => {\n          const title: string = val.Title.toLowerCase().replace(' ', '');\n          this.segmentsObj[title] = val.Details;\n        });\n        console.log(this.segmentsObj);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n}\n\nexport default new SegmentService();\n","/* eslint-disable import/no-anonymous-default-export */\n\nimport { fetchUtils, DataProvider } from 'ra-core';\nimport segmentService from './segmentService';\n\nconst getById = (id: number, res: string) => {\n  const slice: any[] = JSON.parse(segmentService.getSlice(res));\n  return slice.find(val => val.id === id);\n};\n\nexport default (\n  apiUrl: string,\n  httpClient = fetchUtils.fetchJson\n): DataProvider => ({\n  getList: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: JSON.parse(segmentService.getSlice(resource)) };\n  },\n\n  getOne: (resource, params) =>\n    getById(parseInt(params.id.toString()), resource),\n\n  getMany: async (resource, params) => {\n    await segmentService.getSegments();\n    const res = getById(parseInt(resource), resource);\n    return { data: JSON.parse(res.Details) };\n  },\n\n  getManyReference: async (resource, params) => {\n    await segmentService.getSegments();\n    const res = getById(parseInt(resource), resource);\n    return { total: 10, data: JSON.parse(res.Details) };\n  },\n\n  update: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}/${params.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json })),\n\n  // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n  updateMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify(params.data),\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n  create: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({\n      data: { ...params.data, id: json.id },\n    })),\n\n  delete: (resource, params) => {\n    console.log(params);\n    return httpClient(`${apiUrl}/${resource}/${params.id}`, {\n      method: 'DELETE',\n    }).then(({ json }) => ({ data: json }));\n  },\n\n  // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n  deleteMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'DELETE',\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n});\n","import * as React from 'react';\nimport { Datagrid, List, TextField } from 'react-admin';\nexport interface HeadersListProps {}\nconst HeadersList: React.FC<HeadersListProps> = props => {\n  return (\n    <List {...props}>\n      <Datagrid>\n        <TextField source='id' />\n        <TextField source='title' />\n        <TextField source='text' />\n      </Datagrid>\n    </List>\n  );\n};\n\nexport default HeadersList;\n","import React from 'react';\nimport './App.css';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './data-provider/dataProvider';\nimport HeadersList from './headers/HeadersList';\nimport { apiUrl } from './config';\n\nfunction App() {\n  return (\n    <Admin title='Admin Panel' dataProvider={dataProvider(apiUrl)}>\n      <Resource\n        options={{ label: 'Headers' }}\n        name={'header'}\n        list={HeadersList}\n      ></Resource>\n    </Admin>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}