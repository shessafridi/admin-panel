{"version":3,"sources":["config.js","data-provider/segmentService.ts","data-provider/dataProvider.ts","headers/HeadersList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiUrl","process","REACT_APP_API_URL","segmentsObj","getSlice","searchQuery","data","delete","id","resource","getSegments","a","Object","keys","length","console","log","fetchUtils","fetchJson","json","forEach","val","title","Title","toLowerCase","replace","SegmentDetailID","JSON","parse","Details","getById","res","segmentService","find","httpClient","getList","params","total","getOne","parseInt","toString","getMany","getManyReference","update","method","body","stringify","then","updateMany","Promise","all","ids","map","responses","create","deleteMany","HeadersList","props","List","Datagrid","TextField","source","EditButton","basePath","DeleteButton","App","Admin","dataProvider","Resource","options","label","name","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.209189a8.chunk.js","sourcesContent":["export const apiUrl =\n  process.env.REACT_APP_API_URL || 'http://localhost:3100/segments';\n","import { fetchUtils } from 'ra-core';\nimport { apiUrl } from '../config';\n\nclass SegmentService {\n  segmentsObj: any = {};\n\n  getSlice = (searchQuery: string) => this.segmentsObj[searchQuery].data;\n\n  delete = (id: number, resource: string) => {};\n\n  getSegments = async () => {\n    if (Object.keys(this.segmentsObj).length === 0) {\n      try {\n        console.log(apiUrl, 'DEBUG');\n        const response: any[] = await (await fetchUtils.fetchJson(apiUrl)).json;\n        response.forEach(val => {\n          const title: string = val.Title.toLowerCase().replace(' ', '');\n          this.segmentsObj[title] = {\n            id: val.SegmentDetailID,\n            data: JSON.parse(val.Details),\n          };\n        });\n        console.log(this.segmentsObj);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n}\n\nexport default new SegmentService();\n","/* eslint-disable import/no-anonymous-default-export */\n\nimport { fetchUtils, DataProvider } from 'ra-core';\nimport segmentService from './segmentService';\n\nconst getById = (id: number, res: string) => {\n  const slice: any[] = JSON.parse(segmentService.getSlice(res));\n  return slice.find(val => val.id === id);\n};\n\nexport default (\n  apiUrl: string,\n  httpClient = fetchUtils.fetchJson\n): DataProvider => ({\n  getList: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: segmentService.getSlice(resource) };\n  },\n\n  getOne: (resource, params) =>\n    getById(parseInt(params.id.toString()), resource),\n\n  getMany: async (resource, params) => {\n    await segmentService.getSegments();\n    return { data: segmentService.getSlice(resource) };\n  },\n\n  getManyReference: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: segmentService.getSlice(resource) };\n  },\n\n  update: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}/${params.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json })),\n\n  // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n  updateMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify(params.data),\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n  create: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({\n      data: { ...params.data, id: json.id },\n    })),\n\n  delete: (resource, params) => {\n    console.log(params);\n    return httpClient(`${apiUrl}/${resource}/${params.id}`, {\n      method: 'DELETE',\n    }).then(({ json }) => ({ data: json }));\n  },\n\n  // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n  deleteMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'DELETE',\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n});\n","import * as React from 'react';\nimport {\n  Datagrid,\n  DeleteButton,\n  EditButton,\n  List,\n  TextField,\n} from 'react-admin';\n\nexport interface HeadersListProps {}\nconst HeadersList: React.FC<HeadersListProps> = props => {\n  return (\n    <List {...props}>\n      <Datagrid>\n        <TextField source='id' />\n        <TextField source='title' />\n        <TextField source='text' />\n        <EditButton basePath='id' />\n        <DeleteButton basePath='id' />\n      </Datagrid>\n    </List>\n  );\n};\n\nexport default HeadersList;\n","import React from 'react';\nimport './App.css';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './data-provider/dataProvider';\nimport HeadersList from './headers/HeadersList';\nimport { apiUrl } from './config';\n\nfunction App() {\n  return (\n    <Admin title='Admin Panel' dataProvider={dataProvider(apiUrl)}>\n      <Resource\n        options={{ label: 'Headers' }}\n        name={'header'}\n        list={HeadersList}\n      ></Resource>\n    </Admin>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}