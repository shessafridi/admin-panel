{"version":3,"sources":["config.js","data-provider/segmentService.ts","data-provider/dataProvider.ts","headers/HeadersList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiUrl","process","REACT_APP_API_URL","segmentsObj","getSlice","resource","data","getSliceResource","delete","id","slice","index","findIndex","val","splice","updateDb","getSegmentBody","JSON","stringify","SegmentDetailID","SegmentID","Title","title","Details","arrangeId","forEach","i","fetchUtils","fetchJson","method","body","getSegments","a","Object","keys","length","console","log","json","toLowerCase","replace","parse","getById","res","segmentService","find","httpClient","getList","params","total","getOne","parseInt","toString","getMany","getManyReference","update","then","updateMany","Promise","all","ids","map","responses","create","deleteMany","HeadersList","props","List","pagination","Datagrid","TextField","source","sortable","EditButton","basePath","DeleteButton","App","Admin","dataProvider","Resource","icon","StarIcon","options","label","name","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e6e29e5.chunk.js","sourcesContent":["export const apiUrl =\n  process.env.REACT_APP_API_URL || 'http://localhost:3100/segments';\n","import { fetchUtils } from 'ra-core';\nimport { apiUrl } from '../config';\nimport { ResourceSlice } from '../models/Slice';\n\nclass SegmentService {\n  segmentsObj: any = {};\n\n  getSlice = (resource: string): any[] => this.segmentsObj[resource].data;\n  getSliceResource = (resource: string): ResourceSlice =>\n    this.segmentsObj[resource];\n\n  delete = (id: number, resource: string) => {\n    const slice = this.getSliceResource(resource);\n    const index = slice.data.findIndex(val => val.id === id);\n    slice.data.splice(index, 1);\n\n    return this.updateDb(slice);\n  };\n\n  getSegmentBody = (slice: ResourceSlice) =>\n    JSON.stringify({\n      SegmentDetailID: slice.id,\n      SegmentID: slice.id,\n      Title: slice.title,\n      Details: JSON.stringify(slice.data),\n    });\n\n  private arrangeId = (slice: ResourceSlice) =>\n    slice.data.forEach((val, i) => (val.id = i + 1));\n\n  private updateDb = (slice: ResourceSlice) => {\n    this.arrangeId(slice);\n    return fetchUtils.fetchJson(`${apiUrl}/${slice.id}`, {\n      method: 'PUT',\n      body: this.getSegmentBody(slice),\n    });\n  };\n\n  getSegments = async () => {\n    if (Object.keys(this.segmentsObj).length === 0) {\n      try {\n        console.log(apiUrl, 'DEBUG');\n        const response: any[] = await (await fetchUtils.fetchJson(apiUrl)).json;\n        response.forEach(val => {\n          const title: string = val.Title.toLowerCase().replace(' ', '');\n          this.segmentsObj[title] = {\n            id: val.SegmentDetailID,\n            title: val.Title,\n            data: JSON.parse(val.Details),\n          };\n        });\n        console.log(this.segmentsObj);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n}\n\nexport default new SegmentService();\n","/* eslint-disable import/no-anonymous-default-export */\n\nimport { fetchUtils, DataProvider } from 'ra-core';\nimport segmentService from './segmentService';\n\nconst getById = (id: number, res: string) => {\n  const slice = segmentService.getSlice(res);\n  return slice.find(val => val.id === id);\n};\n\nexport default (\n  apiUrl: string,\n  httpClient = fetchUtils.fetchJson\n): DataProvider => ({\n  getList: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: segmentService.getSlice(resource) };\n  },\n\n  getOne: (resource, params) =>\n    getById(parseInt(params.id.toString()), resource),\n\n  getMany: async (resource, params) => {\n    await segmentService.getSegments();\n    return { data: segmentService.getSlice(resource) };\n  },\n\n  getManyReference: async (resource, params) => {\n    await segmentService.getSegments();\n    return { total: 10, data: segmentService.getSlice(resource) };\n  },\n\n  update: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}/${params.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({ data: json })),\n\n  // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n  updateMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify(params.data),\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n  create: (resource, params) =>\n    httpClient(`${apiUrl}/${resource}`, {\n      method: 'POST',\n      body: JSON.stringify(params.data),\n    }).then(({ json }) => ({\n      data: { ...params.data, id: json.id },\n    })),\n\n  delete: (resource, params) => {\n    console.log(params);\n    return segmentService\n      .delete(parseInt(params.id as string), resource)\n      .then(({ json }) => ({\n        data: json,\n      }));\n  },\n\n  // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n  deleteMany: (resource, params) =>\n    Promise.all(\n      params.ids.map(id =>\n        httpClient(`${apiUrl}/${resource}/${id}`, {\n          method: 'DELETE',\n        })\n      )\n    ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n});\n","import * as React from 'react';\nimport {\n  Datagrid,\n  DeleteButton,\n  EditButton,\n  List,\n  TextField,\n} from 'react-admin';\n\nexport interface HeadersListProps {}\nconst HeadersList: React.FC<HeadersListProps> = props => {\n  return (\n    <List pagination={false} {...props}>\n      <Datagrid>\n        <TextField source='id' sortable={false} />\n        <TextField source='title' sortable={false} />\n        <TextField source='text' sortable={false} />\n        <EditButton basePath='id' />\n        <DeleteButton basePath='id' />\n      </Datagrid>\n    </List>\n  );\n};\n\nexport default HeadersList;\n","import React from 'react';\nimport './App.css';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './data-provider/dataProvider';\nimport HeadersList from './headers/HeadersList';\nimport { apiUrl } from './config';\nimport StarIcon from '@material-ui/icons/Star';\n\nfunction App() {\n  return (\n    <Admin title='Admin Panel' dataProvider={dataProvider(apiUrl)}>\n      <Resource\n        icon={StarIcon}\n        options={{ label: 'Headers' }}\n        name={'header'}\n        list={HeadersList}\n      ></Resource>\n    </Admin>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}